{"version":3,"sources":["axios.js","components/MovieRows.js","requests.js","components/Banner.js","pictures/dogProfile.jpg","components/Navbar.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","MovieRows","title","fetchUrl","isLarge","isNull","useState","trailerUrl","setTrailerUrl","movies","setMovies","useEffect","a","get","req","data","results","fetchData","console","log","movieTrailer","className","map","movie","poster_path","backdrop_path","alt","src","name","onClick","then","url","urlParams","URLSearchParams","URL","search","catch","error","handleClick","id","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","request","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","Navbar","show","handleShow","window","addEventListener","scrollY","removeEventListener","ProfilePicture","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.690d0a53.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst instance = axios.create({\n baseURL: \"https://api.themoviedb.org/3\"\n});\n\nexport default instance;","import React, { useState, useEffect } from 'react'\nimport YouTube from 'react-youtube';\nimport axios from \"../axios\";\nimport \"./MovieRows.css\" ;\nimport movieTrailer from \"movie-trailer\";\n// import ReactPlayer from \"react-player\";\n\nconst base_url = \"https://image.tmdb.org/t/p/original\";\n\nexport default function MovieRows({ title, fetchUrl, isLarge, isNull }) {\n//  my youtube video JwPW9VcCq7g\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n const [movies, setMovies] = useState([]);\n\n useEffect(() => {\n\n  async function fetchData() {\n    const req = await axios.get(fetchUrl);\n    setMovies(req.data.results);\n    return req;\n  }\n  fetchData();\n }, [fetchUrl]);\n\n      // for the react youtube component\n      const opts = {\n      height: '390px',\n      width: '100%',\n\n      playerVars: {\n        autoplay: 1,\n      }\n      \n    };\n\n      const handleClick = (movie) => {\n        console.log(trailerUrl);\n          if (trailerUrl) {\n            setTrailerUrl(\"\");\n            console.log(trailerUrl);\n          } else {\n            console.log(movieTrailer(movie?.name || \"\"));\n            movieTrailer(movie?.name || \"\")\n            \n            .then((url) => {\n\n              const urlParams = new URLSearchParams(new URL(url).search);\n              console.log(urlParams);\n              setTrailerUrl(urlParams.get(\"v\"));\n              console.log(trailerUrl);     \n            })\n            .catch(error => {\n              console.log(error);\n              setTrailerUrl(\"JwPW9VcCq7g\");\n            }\n              )\n          }\n      }\n        console.log(movieTrailer(\"lucifer\"));\n return (\n   \n  <>\n    \n   <div className=\"row\">\n\n    <h2 className=\"movieTitle\">{title}</h2>\n\n      <div className=\"posterContainer\">\n\n       {movies.map(movie => {\n\n        // if images are null give img class of null \n\n        return movie.poster_path && movie.backdrop_path == null ? <img alt=\"null\" className=\"nullImage\"/>\n        :\n        <img\n        key={movie.id}\n\n        // if true give class isLarge\n        className={`poster ${isLarge && \"isLarge\"}`}\n        src={`${base_url}${isLarge ? movie.poster_path : movie.backdrop_path}`} \n        alt={movie.name}\n        onClick={() => handleClick(movie)}\n        />\n      \n})}\n\n      </div>\n      {/* when I have a trailerUrl then I will add autoplay trailer */}\n        {trailerUrl &&  <YouTube videoId={trailerUrl} opts={opts} />}\n        {/* <ReactPlayer url={\"https://www.youtube.com/watch?v=JwPW9VcCq7g\"} className=\"youtubeTrailer\"/> */}\n   </div>\n\n  </>\n )\n}\n","const API_KEY = \"d792b3933e08096f3d8ff6d374c43b52\";\n\nconst requests = {\n fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\n fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\n fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\n fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\n fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\n fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\n fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\n fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`\n}\n\nexport default requests;","import axios from '../axios';\nimport React, {useState, useEffect} from 'react'\nimport requests from \"../requests\";\nimport \"./Banner.css\"\n\nfunction Banner() {\n const [movie, setMovie] = useState([]);\n\n useEffect(() => {\n  async function fetchData() {\n   const request = await axios.get(requests.fetchNetflixOriginals);\n    setMovie(\n      request.data.results[\n       Math.floor(Math.random() * request.data.results.length)\n    ]\n   );\n   return request;\n }\n fetchData();\n\n}, []);\n\n// picks a random netflix original film\n\n\nfunction truncate(str, n) {\n  return str?.length > n ? str.substr(0, n - 1) + \"...\" : str;\n}\n\n return (\n   \n   <header className=\"banner\"\n   style={{\n       backgroundSize: \"cover\",\n       backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\n       backgroundPosition: \"center center\"\n     }}>\n\n      <div className=\"bannerContents\">\n        <h1 className=\"bannerTitle\">\n          \n          {/* if there is no movie title show its name, or original name */}\n          {movie?.title || movie?.name || movie?.original_name}\n        </h1>\n\n          <div className=\"buttons\">\n            <button className=\"button\">Play</button>\n            <button className=\"button\">My List</button>\n          </div>\n        <h1 className=\"banner_description\">\n          {truncate(movie?.overview, 150)}</h1>\n      </div>\n      <div className=\"fadeBottom\"/>\n   </header>\n  \n )\n}\n\nexport default Banner;","export default __webpack_public_path__ + \"static/media/dogProfile.e9ccc220.jpg\";","import React, { useEffect, useState } from 'react';\nimport ProfilePicture from \"../pictures/dogProfile.jpg\";\nimport \"./Navbar.css\";\n\nfunction Navbar() {\n    const [show, handleShow] = useState(false);\n   \n    useEffect(() => {\n        window.addEventListener(\"scroll\", () => {\n            if (window.scrollY > 100) {\n                handleShow(true);\n            }\n            else handleShow(false);\n        });\n        return () => {\n            window.removeEventListener(\"scroll\");\n        };\n    }, []);\n\n    return (\n        <>\n            <div className={`nav ${show && \"nav_black\"}`}>\n                 <h1 className=\"xilften\">XiLFTeN</h1>\n\n                 <img\n                 className=\"avatar\"\n                 src={ProfilePicture}\n                 alt=\"Dog Avatar\"\n                 />\n            </div>\n        </>\n    )\n}\n\nexport default Navbar;","import './App.css';\nimport MovieRows from \"./components/MovieRows\";\nimport requests from \"./requests\";\nimport Banner from \"./components/Banner\";\nimport Navbar from \"./components/Navbar\";\n\n\n// left off at 2:40:08 \n// https://www.youtube.com/watch?v=XtMThy8QKqU\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar/>\n      <Banner/>\n      <MovieRows \n      title=\"Netflix Originals\" \n      fetchUrl={requests.fetchNetflixOriginals}\n      isLarge={true} />\n      <MovieRows title=\"Trending\" fetchUrl={requests.fetchTrending}/>\n      <MovieRows title=\"Romantic Comedies\" fetchUrl={requests.fetchRomanceMovies} />\n      <MovieRows title=\"Top-Rated\" fetchUrl={requests.fetchTopRated}/>\n      <MovieRows title=\"Action\" fetchUrl={requests.fetchActionMovies}/>\n      <MovieRows title=\"Comedy\" fetchUrl={requests.fetchComedyMovies}/>\n      <MovieRows title=\"Horror\" fetchUrl={requests.fetchHorrorMovies}/>\n      <MovieRows title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries}/>\n    </div>\n  );\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}